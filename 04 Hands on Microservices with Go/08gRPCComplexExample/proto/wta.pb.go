// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wta.proto

package WTA

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Player struct {
	Id                   uint32               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName            string               `protobuf:"bytes,2,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName             string               `protobuf:"bytes,3,opt,name=lastName,proto3" json:"lastName,omitempty"`
	IsRightHanded        bool                 `protobuf:"varint,4,opt,name=isRightHanded,proto3" json:"isRightHanded,omitempty"`
	BirthDate            *timestamp.Timestamp `protobuf:"bytes,5,opt,name=birthDate,proto3" json:"birthDate,omitempty"`
	CountryCode          string               `protobuf:"bytes,6,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_71898dee3db8884d, []int{0}
}

func (m *Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Player.Unmarshal(m, b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Player.Marshal(b, m, deterministic)
}
func (m *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(m, src)
}
func (m *Player) XXX_Size() int {
	return xxx_messageInfo_Player.Size(m)
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Player) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Player) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Player) GetIsRightHanded() bool {
	if m != nil {
		return m.IsRightHanded
	}
	return false
}

func (m *Player) GetBirthDate() *timestamp.Timestamp {
	if m != nil {
		return m.BirthDate
	}
	return nil
}

func (m *Player) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

type Ranking struct {
	PlayerId             uint32               `protobuf:"varint,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	RankingDate          *timestamp.Timestamp `protobuf:"bytes,2,opt,name=rankingDate,proto3" json:"rankingDate,omitempty"`
	Ranking              uint32               `protobuf:"varint,3,opt,name=ranking,proto3" json:"ranking,omitempty"`
	RankingPoints        float32              `protobuf:"fixed32,4,opt,name=rankingPoints,proto3" json:"rankingPoints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Ranking) Reset()         { *m = Ranking{} }
func (m *Ranking) String() string { return proto.CompactTextString(m) }
func (*Ranking) ProtoMessage()    {}
func (*Ranking) Descriptor() ([]byte, []int) {
	return fileDescriptor_71898dee3db8884d, []int{1}
}

func (m *Ranking) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ranking.Unmarshal(m, b)
}
func (m *Ranking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ranking.Marshal(b, m, deterministic)
}
func (m *Ranking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ranking.Merge(m, src)
}
func (m *Ranking) XXX_Size() int {
	return xxx_messageInfo_Ranking.Size(m)
}
func (m *Ranking) XXX_DiscardUnknown() {
	xxx_messageInfo_Ranking.DiscardUnknown(m)
}

var xxx_messageInfo_Ranking proto.InternalMessageInfo

func (m *Ranking) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *Ranking) GetRankingDate() *timestamp.Timestamp {
	if m != nil {
		return m.RankingDate
	}
	return nil
}

func (m *Ranking) GetRanking() uint32 {
	if m != nil {
		return m.Ranking
	}
	return 0
}

func (m *Ranking) GetRankingPoints() float32 {
	if m != nil {
		return m.RankingPoints
	}
	return 0
}

type PlayerWithRanking struct {
	Player               *Player  `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	Ranking              *Ranking `protobuf:"bytes,2,opt,name=ranking,proto3" json:"ranking,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerWithRanking) Reset()         { *m = PlayerWithRanking{} }
func (m *PlayerWithRanking) String() string { return proto.CompactTextString(m) }
func (*PlayerWithRanking) ProtoMessage()    {}
func (*PlayerWithRanking) Descriptor() ([]byte, []int) {
	return fileDescriptor_71898dee3db8884d, []int{2}
}

func (m *PlayerWithRanking) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerWithRanking.Unmarshal(m, b)
}
func (m *PlayerWithRanking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerWithRanking.Marshal(b, m, deterministic)
}
func (m *PlayerWithRanking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerWithRanking.Merge(m, src)
}
func (m *PlayerWithRanking) XXX_Size() int {
	return xxx_messageInfo_PlayerWithRanking.Size(m)
}
func (m *PlayerWithRanking) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerWithRanking.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerWithRanking proto.InternalMessageInfo

func (m *PlayerWithRanking) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *PlayerWithRanking) GetRanking() *Ranking {
	if m != nil {
		return m.Ranking
	}
	return nil
}

type PlayerIdRequest struct {
	PlayerId             uint32   `protobuf:"varint,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerIdRequest) Reset()         { *m = PlayerIdRequest{} }
func (m *PlayerIdRequest) String() string { return proto.CompactTextString(m) }
func (*PlayerIdRequest) ProtoMessage()    {}
func (*PlayerIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_71898dee3db8884d, []int{3}
}

func (m *PlayerIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerIdRequest.Unmarshal(m, b)
}
func (m *PlayerIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerIdRequest.Marshal(b, m, deterministic)
}
func (m *PlayerIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerIdRequest.Merge(m, src)
}
func (m *PlayerIdRequest) XXX_Size() int {
	return xxx_messageInfo_PlayerIdRequest.Size(m)
}
func (m *PlayerIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerIdRequest proto.InternalMessageInfo

func (m *PlayerIdRequest) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

type PlayersReply struct {
	Player               []*Player `protobuf:"bytes,1,rep,name=player,proto3" json:"player,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PlayersReply) Reset()         { *m = PlayersReply{} }
func (m *PlayersReply) String() string { return proto.CompactTextString(m) }
func (*PlayersReply) ProtoMessage()    {}
func (*PlayersReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_71898dee3db8884d, []int{4}
}

func (m *PlayersReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayersReply.Unmarshal(m, b)
}
func (m *PlayersReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayersReply.Marshal(b, m, deterministic)
}
func (m *PlayersReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayersReply.Merge(m, src)
}
func (m *PlayersReply) XXX_Size() int {
	return xxx_messageInfo_PlayersReply.Size(m)
}
func (m *PlayersReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayersReply.DiscardUnknown(m)
}

var xxx_messageInfo_PlayersReply proto.InternalMessageInfo

func (m *PlayersReply) GetPlayer() []*Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func init() {
	proto.RegisterType((*Player)(nil), "WTA.Player")
	proto.RegisterType((*Ranking)(nil), "WTA.Ranking")
	proto.RegisterType((*PlayerWithRanking)(nil), "WTA.PlayerWithRanking")
	proto.RegisterType((*PlayerIdRequest)(nil), "WTA.PlayerIdRequest")
	proto.RegisterType((*PlayersReply)(nil), "WTA.PlayersReply")
}

func init() { proto.RegisterFile("wta.proto", fileDescriptor_71898dee3db8884d) }

var fileDescriptor_71898dee3db8884d = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x8b, 0xd4, 0x30,
	0x18, 0xc6, 0x27, 0x1d, 0xed, 0x6e, 0xdf, 0xee, 0x28, 0x1b, 0x54, 0x4a, 0x15, 0x2c, 0x51, 0xa4,
	0x17, 0xbb, 0x32, 0x7b, 0x51, 0x10, 0x64, 0x55, 0xd8, 0xf5, 0xa0, 0x0c, 0x61, 0x60, 0xae, 0x66,
	0x6c, 0xb6, 0x0d, 0x76, 0xda, 0xda, 0x64, 0x90, 0x7e, 0x1e, 0xbf, 0x90, 0x07, 0x3f, 0x90, 0x4c,
	0xd2, 0xf4, 0xcf, 0x61, 0xf4, 0x36, 0xef, 0x93, 0xe7, 0x4d, 0x7e, 0xcf, 0x33, 0x05, 0xef, 0xa7,
	0x62, 0x49, 0xdd, 0x54, 0xaa, 0xc2, 0xf3, 0xcd, 0xfa, 0x2a, 0x7c, 0x9a, 0x55, 0x55, 0x56, 0xf0,
	0x0b, 0x2d, 0x6d, 0xf7, 0xb7, 0x17, 0x4a, 0xec, 0xb8, 0x54, 0x6c, 0x57, 0x1b, 0x17, 0xf9, 0x83,
	0xc0, 0x5d, 0x15, 0xac, 0xe5, 0x0d, 0xbe, 0x07, 0x8e, 0x48, 0x03, 0x14, 0xa1, 0x78, 0x41, 0x1d,
	0x91, 0xe2, 0x27, 0xe0, 0xdd, 0x8a, 0x46, 0xaa, 0x2f, 0x6c, 0xc7, 0x03, 0x27, 0x42, 0xb1, 0x47,
	0x07, 0x01, 0x87, 0x70, 0x5a, 0xb0, 0xee, 0x70, 0xae, 0x0f, 0xfb, 0x19, 0x3f, 0x87, 0x85, 0x90,
	0x54, 0x64, 0xb9, 0xba, 0x61, 0x65, 0xca, 0xd3, 0xe0, 0x4e, 0x84, 0xe2, 0x53, 0x3a, 0x15, 0xf1,
	0x6b, 0xf0, 0xb6, 0xa2, 0x51, 0xf9, 0x47, 0xa6, 0x78, 0x70, 0x37, 0x42, 0xb1, 0xbf, 0x0c, 0x13,
	0xc3, 0x9b, 0x58, 0xde, 0x64, 0x6d, 0x79, 0xe9, 0x60, 0xc6, 0x11, 0xf8, 0xdf, 0xaa, 0x7d, 0xa9,
	0x9a, 0xf6, 0x43, 0x95, 0xf2, 0xc0, 0xd5, 0xcf, 0x8f, 0x25, 0xf2, 0x0b, 0xc1, 0x09, 0x65, 0xe5,
	0x77, 0x51, 0x66, 0x07, 0xd2, 0x5a, 0x27, 0xfc, 0x64, 0xd3, 0xf5, 0x33, 0x7e, 0x0b, 0x7e, 0x63,
	0x6c, 0x9a, 0xc2, 0xf9, 0x2f, 0xc5, 0xd8, 0x8e, 0x03, 0x38, 0xe9, 0x46, 0x5d, 0xc1, 0x82, 0xda,
	0xf1, 0xd0, 0x40, 0xf7, 0x73, 0x55, 0x89, 0x52, 0x49, 0xdd, 0x80, 0x43, 0xa7, 0x22, 0xf9, 0x0a,
	0xe7, 0xa6, 0xfb, 0x8d, 0x50, 0xb9, 0xc5, 0x7d, 0x06, 0xae, 0xc1, 0xd3, 0xb0, 0xfe, 0xd2, 0x4f,
	0x36, 0xeb, 0xab, 0xc4, 0xf8, 0x68, 0x77, 0x84, 0x5f, 0x0c, 0x2f, 0x1b, 0xe6, 0x33, 0xed, 0xea,
	0xee, 0xe8, 0x39, 0xc8, 0x4b, 0xb8, 0xbf, 0xea, 0xb2, 0x52, 0xfe, 0x63, 0xcf, 0xa5, 0xfa, 0x57,
	0x1d, 0xe4, 0x12, 0xce, 0x8c, 0x5d, 0x52, 0x5e, 0x17, 0xed, 0x84, 0x65, 0x7e, 0x84, 0x65, 0xf9,
	0x1b, 0xc1, 0xe1, 0x5b, 0xc3, 0x9f, 0xe1, 0xf1, 0x35, 0x57, 0x43, 0xa0, 0x1b, 0x91, 0xe5, 0x5c,
	0x2a, 0x9b, 0xeb, 0xc1, 0x68, 0xb7, 0xa7, 0x09, 0x1f, 0x8d, 0xd4, 0x51, 0x0b, 0x64, 0x86, 0xdf,
	0xc1, 0xc3, 0x6b, 0x6e, 0xb7, 0xe5, 0xfb, 0xd6, 0x6e, 0x1e, 0xb9, 0x68, 0x52, 0x00, 0x99, 0xbd,
	0x42, 0xf8, 0x0d, 0x40, 0xcf, 0x23, 0x8f, 0x6c, 0x9d, 0x8f, 0x54, 0x93, 0x99, 0xcc, 0x62, 0xb4,
	0x75, 0xf5, 0x3f, 0x7f, 0xf9, 0x37, 0x00, 0x00, 0xff, 0xff, 0x00, 0xec, 0x1d, 0xb5, 0x4f, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WTAClient is the client API for WTA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WTAClient interface {
	//unary
	GetPlayerWithHighestRanking(ctx context.Context, in *PlayerIdRequest, opts ...grpc.CallOption) (*PlayerWithRanking, error)
	//server streaming
	GetRankingsByPlayerId(ctx context.Context, in *PlayerIdRequest, opts ...grpc.CallOption) (WTA_GetRankingsByPlayerIdClient, error)
	//client streaming
	GetPlayers(ctx context.Context, opts ...grpc.CallOption) (WTA_GetPlayersClient, error)
}

type wTAClient struct {
	cc *grpc.ClientConn
}

func NewWTAClient(cc *grpc.ClientConn) WTAClient {
	return &wTAClient{cc}
}

func (c *wTAClient) GetPlayerWithHighestRanking(ctx context.Context, in *PlayerIdRequest, opts ...grpc.CallOption) (*PlayerWithRanking, error) {
	out := new(PlayerWithRanking)
	err := c.cc.Invoke(ctx, "/WTA.WTA/GetPlayerWithHighestRanking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wTAClient) GetRankingsByPlayerId(ctx context.Context, in *PlayerIdRequest, opts ...grpc.CallOption) (WTA_GetRankingsByPlayerIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WTA_serviceDesc.Streams[0], "/WTA.WTA/GetRankingsByPlayerId", opts...)
	if err != nil {
		return nil, err
	}
	x := &wTAGetRankingsByPlayerIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WTA_GetRankingsByPlayerIdClient interface {
	Recv() (*Ranking, error)
	grpc.ClientStream
}

type wTAGetRankingsByPlayerIdClient struct {
	grpc.ClientStream
}

func (x *wTAGetRankingsByPlayerIdClient) Recv() (*Ranking, error) {
	m := new(Ranking)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wTAClient) GetPlayers(ctx context.Context, opts ...grpc.CallOption) (WTA_GetPlayersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WTA_serviceDesc.Streams[1], "/WTA.WTA/GetPlayers", opts...)
	if err != nil {
		return nil, err
	}
	x := &wTAGetPlayersClient{stream}
	return x, nil
}

type WTA_GetPlayersClient interface {
	Send(*PlayerIdRequest) error
	CloseAndRecv() (*PlayersReply, error)
	grpc.ClientStream
}

type wTAGetPlayersClient struct {
	grpc.ClientStream
}

func (x *wTAGetPlayersClient) Send(m *PlayerIdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wTAGetPlayersClient) CloseAndRecv() (*PlayersReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PlayersReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WTAServer is the server API for WTA service.
type WTAServer interface {
	//unary
	GetPlayerWithHighestRanking(context.Context, *PlayerIdRequest) (*PlayerWithRanking, error)
	//server streaming
	GetRankingsByPlayerId(*PlayerIdRequest, WTA_GetRankingsByPlayerIdServer) error
	//client streaming
	GetPlayers(WTA_GetPlayersServer) error
}

// UnimplementedWTAServer can be embedded to have forward compatible implementations.
type UnimplementedWTAServer struct {
}

func (*UnimplementedWTAServer) GetPlayerWithHighestRanking(ctx context.Context, req *PlayerIdRequest) (*PlayerWithRanking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerWithHighestRanking not implemented")
}
func (*UnimplementedWTAServer) GetRankingsByPlayerId(req *PlayerIdRequest, srv WTA_GetRankingsByPlayerIdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRankingsByPlayerId not implemented")
}
func (*UnimplementedWTAServer) GetPlayers(srv WTA_GetPlayersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPlayers not implemented")
}

func RegisterWTAServer(s *grpc.Server, srv WTAServer) {
	s.RegisterService(&_WTA_serviceDesc, srv)
}

func _WTA_GetPlayerWithHighestRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WTAServer).GetPlayerWithHighestRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WTA.WTA/GetPlayerWithHighestRanking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WTAServer).GetPlayerWithHighestRanking(ctx, req.(*PlayerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WTA_GetRankingsByPlayerId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PlayerIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WTAServer).GetRankingsByPlayerId(m, &wTAGetRankingsByPlayerIdServer{stream})
}

type WTA_GetRankingsByPlayerIdServer interface {
	Send(*Ranking) error
	grpc.ServerStream
}

type wTAGetRankingsByPlayerIdServer struct {
	grpc.ServerStream
}

func (x *wTAGetRankingsByPlayerIdServer) Send(m *Ranking) error {
	return x.ServerStream.SendMsg(m)
}

func _WTA_GetPlayers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WTAServer).GetPlayers(&wTAGetPlayersServer{stream})
}

type WTA_GetPlayersServer interface {
	SendAndClose(*PlayersReply) error
	Recv() (*PlayerIdRequest, error)
	grpc.ServerStream
}

type wTAGetPlayersServer struct {
	grpc.ServerStream
}

func (x *wTAGetPlayersServer) SendAndClose(m *PlayersReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wTAGetPlayersServer) Recv() (*PlayerIdRequest, error) {
	m := new(PlayerIdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _WTA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WTA.WTA",
	HandlerType: (*WTAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayerWithHighestRanking",
			Handler:    _WTA_GetPlayerWithHighestRanking_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRankingsByPlayerId",
			Handler:       _WTA_GetRankingsByPlayerId_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPlayers",
			Handler:       _WTA_GetPlayers_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "wta.proto",
}
